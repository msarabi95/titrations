# AUTOGENERATED! DO NOT EDIT! File to edit: ../basics.ipynb.

# %% auto 0
__all__ = ['VALID_PARAMETERS', 'MedicationClass', 'Ingredient', 'Medication', 'Reaction', 'Patient']

# %% ../basics.ipynb 1
from typing import List, Dict, Optional

# %% ../basics.ipynb 2
VALID_PARAMETERS = [
    'SBP', 'HR', 'K', 'Cr', 'eGFR',
    'decompensated', 'symptomatic', 'has_pacemaker', 'av_block',
    'severe_gu_infxns', 'has_type_1_diabetes', 'has_type_2_diabetes_on_insulin',
    ]

# %% ../basics.ipynb 3
class MedicationClass:
    """A medication class"""
    def __init__(self, name:str):
        self.name = name

class Ingredient:
    def __init__(self, name:str, med_class : Optional[MedicationClass] = None):  # TODO: modify to make med_class required
        self.name = name
        self.med_class = med_class

class Medication:
    def __init__(self, ingredient:Ingredient, dose:str, route:str, frequency:str):
        self.ingredient = ingredient
        self.dose = dose
        self.route = route
        self.frequency = frequency

    @property
    def name(self):
        return self.ingredient.name
    
    @property
    def med_class(self):
        return self.ingredient.med_class

    def __repr__(self) -> str:
        return f"{self.name} {self.dose} {self.route} {self.frequency}"

# %% ../basics.ipynb 4
class Reaction:
    """
    A listing of an adverse medication reaction or allergy.
    """
    def __init__(self, ingredient: Ingredient, description: str):
        self.ingredient = ingredient
        self.description = description

# %% ../basics.ipynb 5
class Patient:
    def __init__(self, 
                 medications : List[Medication] = [],
                 reactions : List[Reaction] = [],
                 max_tolerated : Dict[str, Medication] = [],
                 **kwargs
                 ):
        self.medications = medications
        self.reactions = reactions
        self.max_tolerated = max_tolerated
        for arg in kwargs:
            assert arg in VALID_PARAMETERS, "Not a valid parameter"
            setattr(self, arg, kwargs[arg])

    def on_medication(self, ingredient : Ingredient, dose : str = None):
        # TODO: optionally check for dose, route, and frequency
        med_names = [med.name for med in self.medications]
        return ingredient.name in med_names
    
    @property
    def current_medication_names(self):
        return [med.name for med in self.medications]
    
    @property
    def current_med_class_names(self):
        return [med.med_class.name for med in self.medications if med.med_class]  # TODO: modify after med_class is made mandatory
    
    def current_dose_of(self, ingredient : Ingredient):
        filtered = list(filter(lambda med: med.name == ingredient.name, self.medications))
        assert len(filtered) <= 1
        return filtered[0] if filtered else None

    def has_reaction_to(self, ingredient : Ingredient):
        meds_w_reactions = [reaction.ingredient.name for reaction in self.reactions]
        return ingredient.name in meds_w_reactions
